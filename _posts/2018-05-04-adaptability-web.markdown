---
layout: post
title:  "적응형 웹, 오해와 편견"
date:   2018-05-04 00:00:00 +0900
categories: jekyll update
---
반응형웹, 적응형웹.  
이런말 많이 들어보셨을 겁니다. 아니, 반응형웹은 핵심적인 부분은 누군가에게 설명도 하실 자신감도 있으실 겁니다.  
그리고 적응형웹도 어느정도는... 대충은... 아는편이라고 생각하고 계실겁니다.  
저같은 경우, 현업에서는 적응형웹이라는 단어를 쓰는 분은 보지 못했습니다.  
그저 커뮤니티나 블로그에서나 가끔 봤던 단어입니다.  

저는 그동안, 반응형웹의 장점보다는 단점이 더 강한 방법론이라고 인식하고 있었고,  
반응형웹 절대론에 대해 일종의 반항심같은 것이 있었습니다.  
그러나, 이번 해에 저는 제대로 빡센 반응형웹 프로젝트를 맡게 되면서 반 강제적으로 반응형웹에 대해 관심을 가지게 되었습니다.  
이렇게 반응형웹을 좀 깊이 파고들다 보니, 자연스럽게 '그러면 또 적응형웹은 또 뭐란말인가?'하는 호기심이 생겼습니다.  

그래서 알아보던 과정에서 커뮤니티나 블로그에서 쓰이는 그 말이 뭔가 껄끄럽고, 애매했던 이유를 알게되었습니다.  
그리고 오늘 이 포스팅으로 '적응형웹'을 정리하고자 합니다.  
반응형웹은요? 그건 워낙 블로그 위키 등에 어마어마하게 잘 정리되어 있으며, 적응형웹과 달리 딱히 오류없이 잘 정리정돈되어 있기에 저는 적응형웹에만 집중하려 합니다.  

단도직입적으로 말씀드립니다.  
그리고 조금은 자극적으로 시작해보려 합니다.  
당신이 알고 있는 적응형웹에 대한 지식은 틀렸습니다.  
일단 먼저 까고 시작하겠습니다.  
일반적으로 한국 커뮤니티 및 블로그에서 통용되는 정의들을 까고(?)나서,  
다시 제가 올바르게 바로잡은 정의를 서술하겠습니다.  
건방져보일런지요. 그래도 계속 읽어보시면 분명 도움이 되실겁니다.  

## 다섯가지 썰
인터넷을 찾아보면 아래와 같이 다섯가지 썰이 존재합니다.

### 썰1. 동의어론
적응형웹과 반응형웹은 동의어이다. 구분짓지말라!

### 썰2. 레이어(Layer) 차이론
- 적응형웹은 서버사이드 레이어에서 를 디바이스를 감지하여 준비해둔 여러버전의 템플릿중 택1하여 클라이언트로 전송해주는 설계이다.
- 반응형웹은 템플릿은 항상 동일하다. 그 동일한 템플릿을 클라이언트로 전송해주고, 차이점은 클라이언트 레이어인 '웹브라우저'가 너비나 디바이스를 감지하여 style 및 DOM 조작을 하는것이다.

### 썰3. 언어 차이론
- 적응형웹은 Javascript로 조작(DOM Manipulation)하고,
- 반응형웹은 CSS Mediaquary로 조작하는것이다.

### 썰4. 유동성(Liquid) 여부 차이론
- 적응형웹은 Liquid하지 않고
- 반응형웹은 Liquid한 것이다.

예컨대, 적응형웹은 320에서는 딱 맞지만, 330, 340 등에서는 약간의 공백이 발생하다가, 640에서는 또 딱 들어맞는다. 반응형웹은 320, 330, 340 모두 딱 들어맞는다.

### 썰.5 레이어(Layer) + 유동성 혼합론
- 적응형웹은 서버사이드 + Not Liquid 하다.
- 반응형웹은 Liquid 하다.
- 짬뽕 방식 : 적응형웹을 쓰되, Not Liquid의 공백을 채우기위해 반응형웹도 쓰는 개념이다.

위의 다섯가지 썰은 모두 '거짓'입니다. 놀랍게도 그렇습니다.

## 사실은 이렇습니다.
- 적응형웹은 반응형웹과 동등한 병렬적 개념이 아닙니다.
- 반응형웹은 적응형웹에 종속되는 개념입니다.
- 적응형웹은 반응형웹에 대한 서버측 대안으로 오해받고 있는 실정입니다.
- 적응형웹은 서버레이어 + 클라이언트 레이어 모두 포괄한 '전략', '철학', '프로세스'입니다.
- 반응형 웹디자인은 전적으로 프론트단으로 한정되어 있습니다.
- 즉, 반응형웹으로 만든 사이트를 발견했다면, 그것을 보고 '이거 적응형웹이군!' 하면 그 말은 정확히 '사실'입니다.

한마디로 이 이미지로 압축됩니다.

![적응형웹은 서버 레이어와 클라이언트 레이어로 구성된다.](/assets/2018-05-04-adaptability-web-01.png)

## 그리고 예제. 네이버.
마지막으로 조금더 확실하게 느낌을 드리기 위해 예제를 들어보겠습니다.  
네이버 포털을 예시로 들면 좋을것 같습니다.  
여러분들은 먼저 네이버 포털의 익숙한 '두장면'이 있을겁니다.  

A판 는 일반적으로 PC로 접속했을때 나오는 모습입니다.

![ ](/assets/2018-05-04-adaptability-web-02.jpg)


B판 는 모바일로 접속했을때 나오는 모습입니다.

![ ](/assets/2018-05-04-adaptability-web-03.jpg)

즉, 네이버 포털은 두개의 판을 준비해두고, '상황에 따라 클라이언트측으로 A판을 내주거나, B판을 내줄 전략'을 짰습니다.  
여기까지는 분명 적응형웹(전략)입니다. 아직까지는 '반응형웹'인지 아닌지 알 수 없습니다. 아직은요.  
여기서부터는 직접 해보세요. 먼저 PC로 네이버에 접속해보세요. 그리고 가로 사이즈를 줄여보세요.  
전혀 반응이 없을겁니다. 즉, A판은 반응형웹이 아닙니다.  
반면에, m.naver.com으로 접속하신 후 마찬가지로 사이즈를 줄여보세요. 너비에따라 1칼럼, 2칼럼, 3칼럼으로 레이아웃이 바뀌고 그 중간중간도 Full-Width가 유지되는게 보이실겁니다.  
B판은 반응형인겁니다.  

## 추천글
마지막으로 적응형웹 관련 좋은 글이 있어서 링크남겨놓겠습니다.  
[the many faces of ‘adaptive design’][link1]

[link1]: http://bradfrost.com/blog/post/the-many-faces-of-adaptive-design/
